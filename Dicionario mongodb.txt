Local para rodar o c√≥digo
>> C:\Program Files\MongoDB\Server\8.0\bin
:> mongod.exe

depois:
>> C:\mongo\mongosh-2.3.8-win32-x64\bin
:> mongosh.exe

ctrl + C --> Fechar o servidor
sair do mongo no cmd --> exit()

table -> collections
rows -> documents (BSON)
columns -> fields (campos)

C O M A N D O S    I N I C I A I S:
-----------------------------------
show dbs: mostra todos os bancos que voc√™ tem
show collections --> Mostrar todas as colections do banco

db.enderecos.countDocuments() --> Conta os documentos de uma collection

use "alunos": cria um novo database / ou usar um existente

bd. tab + tab: Mostra todos os comando de db
bd.alunos. tab + tab: Mostra todos os comandos collection

DATAS:
new Date (Ano, m√™s que voc√™ quer -1, dia)
data:new ISODate()
SE DEIXAR VAZIO PEGA O DIA DE HOJE
data:new ISODate(date:{$lt:new Date(2025, 1, 20)})

db.clientes.updateMany({ $and: [ { saldo: { $gt: 10000 } }, { cartao_credito: { $exists: true } }, { data_abertura: { $lte: new Date(2023, 1, 20) } }] }, {$mul: {"cartao_credito.saldo": 1.65}})
------------------------------
I N S E R T   E   D E L E T E:
------------------------------

DENTRO DE UMA COLLECTION:
db.alunos.insertOne({nome:"Pessoas"}) -> cria uma linha com conte√∫do na collection
db.alunos.insertMany([{doc1}, {doc2}, {doc3}]) -> cria v√°rias ao mesmo tempo

db.alunos.deleteOne({nome:"Pessoas"}) -> Deleta o documento que tenha essa informa√ß√£o
db.clientes.findOneAndDelete({outro:{$exists:true}}) -> Deleta o documento e mostra qual foi deletado

db.dropDatabase() --> deleta o banco

F I N D  /  O P E R A D O R E S:
--------------------------------
operadores --> tudo que tiver um $antes

db.alunos.find() --> Select *
db.alunos.find({campo:valor_do_campo}) --> Filtragem
db.alunos.find({idade:16, estagio:true}) --> Mais de um filtro ao mesmo tempo
db.alunos.find({estagio:true}).count() --> Quantos documentos tem o estagio:true

db.collection.findOne() --> Mostra o primeiro registro
db.collection.findOne({campo:valor}) --> Mostra o primeiro registro colocado com campo:valor

$and: Mais de um filtro ao mesmo tempo
- Syntax: { $and: [ { <express√£o> }, { <express√£o> } , ...] }
- Query: db.clientes.find({ $and: [ { "cartao_credito.status": { $exists: true } }, { "cartao_credito.status": {$ne: "ativo"} }] })

$exists: Verifica se um campo existe usando True ou False
- Syntax: { campo: { $exists: <boolean> } }
- Query: db.alunos.find({telefone:{$exists: true}}) --> Onde tem campo telefone 
- Query: db.alunos.find({telefone:{$exists: false}}) --> Onde n√£o tem Campo telefone

$or: OU mostra as  pessoas com um desses nomes
- Syntax: { $or: [ {<campo1:valor1>}, {<campo2:valor2>}, ... ] }
- Query: db.alunos.find({$or:[{nome:"Juliana"}, {nome:"Fernanda"}]}) 

$in e $nin: Retorna onde pelo menos um dos itens do array cumpra a especifica√ß√µes
- Syntax: { campo: { $in: [<valor1>, <valor2>, ... ] } }
- Query: db.alunos.find({nome:{$in:["Fernanda","Juliana"]}})
- Query: db.alunos.find({"escola.nome":{$nin:["Germinare Tech", "Germinare Vet"]}})

$not: Retorna no n√£o tem a express√£o ou operador especificado
- Syntax: { campo: { $not: { <operador-express√£o> } } }
- Query: db.alunos.find({"escola.qnd_professores": {$not: {$lt:10}}}) --> Pegar alunos acessando uma array, onde a quantidade de professores n√£o √© maior que 10
- Query: db.clientes.find({"endere√ßo.estado": {$not: {$eq: "SP"} }})

$ne: mesma coisa que {$not: {$eq: "valor"}}
- Syntax: { campo: { $ne: valor } }
- Query: db.clientes.find({"endere√ßo.estado": {$ne: "SP" }})

$type: procurar pelo tipo de um campo ou valor, tem um tabela num√©rica de tipos
- Syntax: { campo: { $type: <tipo da v√°riavel> } }
- Query: db.alunos.find({telefone: {$type: "int"}}) 

typeof: Descobrir o tipo de um campo
- Syntax: typeof db.collection.findOne({<identificar-documento>}).campo
- Query: typeof db.alunos.findOne({nome:"Juliana"}).telefone 

$regex üòé: 
- Syntax: { $regex: /padr√£o/ }
- Query: db.alunos.find({disciplinas:{$regex: /Desenvolvimento/i}})
--------------------------------------
SELETORES DE QUERY:
$eq : == | Igual
$gt : >  | Maior
$gte: >= | Maior igual
$lt : <  | Menor
$lte: <= | Menor igual

- Syntax: { <campo>: { $eq: <valor> } } --> √â usado desse forma quando √© para retornar um operador:
- Query: db.alunos.find({media:{$lt:7}}) 
Quando √© usado no COND: 
{$gt: ["$valor",9500 ]}
--------------------------------------
======================================
OS CAMPOS PROCURADOS DEVEM EXISTIR EM TODOS OS DOCUMENTOS PARA FUNCIONAR

$elemMatch: Procura pelo menos 1 elemento segundo o que voc√™ pediu e retorna o campo array
- Syntax: { <campo>: { $elemMatch: { <query1>, <query2>, ... } } } 
- Query: db.clientes.find({emprestimo_tipo:{$elemMatch: {$eq: "Pessoal"}}})

$size: S√ì FUNCIONA COM em array E COM N√öMEROS INTEIROS, nada de opera√ß√µes, pega a quantidade de elementos
- Syntax: { campo: { $size: <inteiro> } }
- Query: db.alunos.find({disciplinas:{$size:4}})

$expr:
Forma de usar:
1¬∞ Usar $expr | 2¬∞ a express√£o que voc√™ quer usar | 3¬∞ A coluna em que voc√™ que usar a express√£o
- Syntax: { $expr: { <express√£o> } }
- Query: db.alunos.find({$expr:{$gte:[{$size:"$disciplinas"}, 3]}})
======================================

-- UPDATE:
findOneandReplace() --> √â o update onde porem d√° para ver como o documento estava antes

db.alunos.updateOne(): Tamb√©m pode servir para criar um novo campo no final, caso ele n√£o exista

$set: Serve para criar novo campo ou mudar um campo existente
- Query: db.alunos.updateOne({nome:"Juliana"}, {$set:{media:7.8}}) --> Modifica somente o primeiro com o nome:"Juliana", muda a m√©dia para 7.8

Adicionar em todos os docs o mesmo campo e mesmas informa√ß√µes (filtro vazio):
- Query: db.alunos.updateMany({}, { $set: { escola: { nome: "Germenare Tech", diretor: "Jo√£o Pilla", qnd_professores: 4 } } } ) 

$unset: Delete um campo
- Syntax: { $unset: { campo: ""}}
- Query: db.clientes.updateOne({ $and: [ { "cartao_credito.status": { $exists: true } }, { "cartao_credito.status": {$ne: "ativo"} }]}, {$unset: {cartao_credito: ""}})


$setOnInsert: Voc√™ quer atualizar algo, se n√£o encontrar na filtragem ent√£o ele cria um novo documento (evitar duplicados)
-- upsert(par√¢metro): se for false n√£o cria um novo documento independente de ter achado ou n√£o
- Syntax: 
- Query: db.clientes.updateOne({nome:"outro"}, {$setOnInsert:{teste:"teste",outro:"teste2"}}, {upsert:true})
 

-------------------------------------------------------------------
S√ì FUNCIONAM COM VALORES N√öMERICOS
$inc: Atualiza um valor existente (Adi√ß√£o ou subtra√ß√£o)
- Syntax: {$inc: {<campo> : valor_incrementado}}
- Query: db.clientes.updateMany({cartao_credito: {$exists:true}}, {$inc:{saldo:100}})
- Query: db.clientes.updateMany({cartao_credito: {$exists:true}}, {$inc:{saldo: -50}})

$mul: Atualiza um valor existente (Multiplica o valor ou divis√£o)
- Syntax: { $mul: { <campo>: <porcentagem_decimal> } }
- Query: db.clientes.updateMany({idade: {$gt:60}}, {$mul: {saldo: 1.1}}) --> aumenta 10%

Inc + Mul: {$inc: {$mul: 1.1}} --> se o valor for 100, retorna 210
-------------------------------------------------------------------

$min e $max: S√≥ atualiza se o valor for menor(min), ou maior(max) que o valor especificado
ESTOQUE: min = min: max = max
$max: aumenta se o valor for menor |  $min: Diminui se o valor for maior
- Syntax: ($min/$max: {<campo>: valor})
- Query: db.clientes.updateOne({nome: "Iago"}, {$min: {saldo:101}})
- Query: db.clientes.updateOne({nome: "Iago"}, {$max: {saldo:100}})

$rename: deve sempre usar ""
- Se quando for renomear, a array n√£o tiver um nome diferente, o ideal √© fazer um de cada vez
- Syntax: { $rename: { "<campo>": "<novo_nome>", "<campo2>": "<novo_nome2>"} }
- Query: db.clientes.updateMany({}, {$rename: {"endere√ßo": "endereco"}})
- Query: db.clientes.updateMany({}, {$rename: {"endere√ßo": "endereco", "Campo1": "valor2"}})

-------------------------------------------------------------------
-- RETORNO COM FORMATA√á√ÉO SEPARADA

1: Siginifica de certa forma o True (Deve aparecer)
0: Representa o False (N√£o vai aparecer)

-- db.clientes.find({}, {nome:1, _id:0}) mostrar somente os nomes dos documentos

-- db.clientes.find({ emprestimo_disponivel:true }, {nome:1, "endere√ßo":1, emprestimo_disponivel:1 , _id:0})
-------------------------------------------------------------------

ARRAYS:
$pull: remove TODOS OS VALORER CORRESPONDENTES de um campo array
- Syntax: { $pull: { <campo1>: <valor|condi√ß√£o>, <campo2>: <valor|condi√ß√£o>, ... } }
- Query: db.clientes.updateOne({nome:"Lamelo"}, {$pull: {empretimo_tipo: 'Consignado'}}) 

$push: Adiciona um valor na array sem se importar com duplicatas
- Syntax:{ $push: { <campo1>: <valor1>, ... } }
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$push: {emprestimo_tipo: 'Pessoal'}})

$addToSet: Adiciona um valor numa array e garantir que o valor seja √∫nico, (n√£o adiciona se j√° existir)
- Syntax: { $addToSet: { <campo1>: <valor1>, ... } }
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$addToSet: {emprestimo_tipo: 'FGTS'}})

$pop: s√≥ faz a remo√ß√£o do √∫ltimo ou o primeiro:
- Syntax: { $pop: { <campo>: <-1 | 1>, ... } } [-1: primeiro | 1: √∫ltimo]
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$pop: {emprestimo_tipo: 1}})

$pullAll: Remove mais de um item de uma array por vez (TODOS os correspondentes)
- Syntax: { $pullAll: { <campo>: [ <valor1>, <valor2> ... ], ... } }
- Query: db.lista.updateOne({_id:1}, {$pullAll:{vetor_num: [10,3]}})

$each [Modificador]: 
- Use com $addToSet ou $push para adicionar v√°rios valores a uma array <campo> se os valores n√£o existirem no <campo>.
- Syntax: { $addToSet: { <campo>: { $each: [ <valor1>, <valor2> ... ] } } }
- Query: db.clientes.updateOne({nome:"Lamelo"}, {$addToSet: {emprestimo_tipo: {$each: ["FGTS" ,"Consignado", "Pessoal", "Garantia"]}}})

$position:
Adiciona em uma posi√ß√£o espec√≠fica 
- Syntax: 
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_num:{$each:[10,3], $position:0}}})

$slice:
Limita a quantidade de elementos
Final para o come√ßo (√∫ltimos itens do array): n√∫mero negativo -5
- Syntax: 
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_num:{$each:[100,200], $slice: -5}}})
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_nome:{$each: [], $slice: 3}}}) [deixar os 3 primeiros]
Colocar no meio de uma array com position: (tamanho da array / 2) + 1

$sort:
Ordena em ordem crescente [1] ou decrescente [-1]
Colocar no meio de uma array com position: (tamanho da array / 2) + 1
db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})
- Syntax: 
{ $push: {
     <campo>: {
       $each: [ <valor1>, <valor2>, ... ],
       $sort: <ordem desejada> }
  }
}
- Query: db.lista.updateOne({_id:1}, {$push: { vetor_nome: {$each: [ "Zacarais", "Andre", "Bruno" ], $sort: 1}} })
- Query (sem adicionar):  db.lista.updateOne({_id:1}, {$push: { vetor_nome: {$each: [], $sort: 1}} })
- Query: db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})
--------------------------------------------

.sort()
Sa√≠da ordenada
|  saldo: menor -> maior
|  data_abertura: mais recente-> mais antigo
- Query: db.clientes.find({}, {_id:0, nome:1, sobrenome:1, saldo:1}).sort({saldo:1})   
- Query: db.clientes.find({}, {_id:0, nome:1, sobrenome:1, endereco:1}).sort({nome:1, sobrenome:1})
- db.clientes.find({}, {_id:0, nome:1, sobrenome:1, data_abertura:1}).sort({data_abertura:1}) 

db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})

I M P O R T A √á √É O 
-------------------
- Formata√ß√µes v√°lidas: csv, json, tsv.
Na pasta: 

>> C:\mongo\mongosh-2.3.8-win32-x64\bin\tools
Dar o comando: 
:> mongoimport.exe --db=techBank --collection=Contas --type=csv --headerline --file="caminho\Contas.csv"

Quando for um arquivo .json, n√£o precisa do type:
:> mongoimport.exe --db=techBank --collection=Clientes --file="caminho\Clientes.json" --jsonArray

Renomear Collection
- Query: db.Clientes.renameCollection("clientes")

.limit()
- Systax: db.collection.find(<query>).limit(<number>)
- Query: db.clientes.find({}, {nome:1, _id:0}).sort({data_nascimento:1}).limit(1)

$all: √â tipo o $and
- Syntax: { <campo>: { $all: [ <valor1> , <valor2> ... ] } }
- Query: db.clientes.find({seguros:{$all:["seguro de vida","seguro para carro"]}}).count()

.distinct: 
Procurar valores distintos para um √∫nico campo
- Query: db.contas.distinct("tipo")
- Query: db.enderecos.distinct("estado")
- Query: db.clientes.distinct("profissao", {profissao: {$regex: /^v/i}})

.length:
√â usado para valores dentro de uma array
- Query: db.clientes.distinct("status_civil").length
----------------------------------------------------

Framework: programa + algumas fun√ß√£o da linguagem, reduz sobrecarga de rede
Biblioteca: S√≥ o programa, voc√™ o usa mudando alguns par√¢metros

Aggregate Framework: + de 1 consulta, updates, qualquer coisa mais avan√ßada (pipelines baseado em est√°gios)
Find: procura Documentos
Aggregate: faz mudan√ßa com retorno

$sum
- Syntax: { $sum: <express√£o> }
- Query: <Null>

$group:
- Syntax: { $group: {f
  _id: <express√£o>, // Group key
   <campo1>: { <accumulador> : <express√£o> },
}}
- Query: db.clientes.aggregate({$group: {_id: "$status_civil", "Quantidade": {$count:{}}}}) --> pega os √∫nicos de cada estado civil e depois conta cada um deles
- Query: db.contas.aggregate([
   {$group: {_id: "$tipo", "Total em dinheiro": {$sum: "$valor"}}},
   { $sort: { "Total em dinheiro":1 }}
]) --> Colocar colchetes, soma os saldos por tipo de contas
- Query: db.contas.aggregate([{ $group: { _id: "$agencia", "qnt": { $count:{} } } }, { $sort: { "qnt": -1 } }] )


$match:
- Syntax
- Query: db.contas.aggregate([
    {$match:{valor: {$gt:8500}}},
    {$group:{_id:"$tipo", "Quantidade": {$count:{}}}}
]) --> pegua 1¬∞ os docs em que os valores s√£o > que 8500 e depois contas ele por 'distinct'
- Query: db.contas.aggregate([{ $match: { agencia: 1545 } }, { $group: { _id: "$tipo", "Dinheiro": { $sum: "$valor" } } }, { $sort: { "Dinheiro": -1 } }] )

$limit:
-- Limita a quantidade de retornos na query
- Syntax: db.article.aggregate([
   { $limit : 5 }
]);
- Query: db.clientes.aggregate([{$sort: {data_nascimento:1}}, {$limit:1}])


$sortByCount:
- Syntax: { $sortByCount:  <expression> }
- Query sem: db.clientes.aggregate([{$group: {_id:"$genero", "qnt": {$count:{}}}}, {$sort: {_id:1}}])
- Query: db.clientes.aggregate([{$sortByCount: "$genero"}])


$unwind:
Descontroi um campo de matriz dos documentos para
- Syntax:  { $unwind: <campo path> }
- Query: db.clientes.aggregate([{$unwind: "$seguros"}, {$sortByCount: "$genero"}])


$firt: (OPERADOR DO $GROUP)
- Syntax: 
- Quet: <null>


DESAFIOS:
QNT AGENCIAS NO BANCO?
db.contas.aggregate({$group: {_id: "$agencia"}} ,{$count: "qnt" })

QUAL AGENCIA TEM MAIS CONTA?

AGENCIA COM 5 > SALDOS?
db.contas.aggregate([ { $group: { _id: "$agencia", "Total": { $sum: "$valor" } } }, { $sort: { "Total": -1 } }, { $limit: 5 }] )

QUANTOS CLIENTES TEM MAIS DE UM ENDERE√áO CADASTRADO?
 db.enderecos.aggregate({$group: {_id: "$id_cliente", "qnd": {$count:{}}}})  

RANKING DOS 10 primeiros QUE MAIS TEM ENDERE√áO CADASTRADOS
 db.enderecos.aggregate({$sortByCount:"$estado"}, {$limit: 10})
----------------------------------------------------------------------

$lookup:
--- EXPLICA√á√ÉO
IMAGEM: https://miro.medium.com/v2/resize:fit:1400/1*nkturuH9V8Pv3XJZXDgfzg.png
-- Busca em duas tabelas e junta onde os valores s√£o EXATAMENTE IGUAIS, cria um array com os documentos com os valores correspondentes
from: collection que vai buscar
localField: campo da collection que usa o aggregate
foreignField: campo que vai buscar o mesmo valor,
as: alias para usar em outros est√°gios ou na sa√≠da,
pipeline: filtro netro do lookup, quando for usado o $match, usar com $ne[]
{$match: {contas_correntes: {$ne: []}}}
----
- Query: db.clientes.aggregate([
  { $lookup: {
    from: "contas",
    localField: "_id",
    foreignField: "id_cliente",
    as: "clientesContas"
    }
  } 
])
- Query: db.clientes.aggregate([ {$match: {_id:30} }, 
{ $lookup: { from: "contas", localField: "_id", foreignField: "id_cliente", as: "clientesContas" } }])


$addFields: 
-- Pode ser usado para adiciona um campo de baseado no retorno de $lookup
A ordem em que ele √© colocado na query afeta a sa√≠da
- Query:  db.clientes.aggregate([ 
  {$match: {_id:30} }, 
  {$lookup: { from: "contas", localField: "_id", foreignField: "id_cliente", 
   as: "clientesContas" }}, 
{$addFields: {numero_de_contas: {$size: "$clientesContas"}} }])




$project:
-- √â Basicamente a formata√ß√£o do aggregate | projeta como os campos ser√£o retornados
- Syntax: { $project: { <especifica√ß√£o(s)> } }
- Query: db.clientes.aggregate([ 
  {$match: {_id:30} }, 
  {$lookup: { 
   from: "contas", localField: "_id", foreignField: "id_cliente", 
   as: "clientesContas" }
  }, 
  {$addFields: {numero_de_contas: {$size: "$clientesContas"}}},
  {$project:  {_id:0, clientesContas:0 } }
])
- Query: db.clientes.aggregate([
{$lookup:{ 
 from: "enderecos", localField: "_id", foreignField: "id_cliente", as: "endereco" 
}}, 
{$addFields: {"endere√ßos": {$size: "$endereco"}}},
{$sort:{"endere√ßos":-1, "data_nascimento":1}},
{$limit:4},
{$project: {
    _id:0, nome:1, data_nascimento:1, "endereco.cidade":1, "endereco.estado":1 
}}])  --> Pegar a informa√ß√£o de endere√ßo dos 4 mais velhos


F U N √á √ï E S   N O   M O N G O D B 
--------------------------------------

$rand : Cria um n√∫mero aleat√≥rio qubrado do tipo float entre 0 e 1
- Syntax: { $rand: {} }
- Query:  db.clientes.aggregate({$project: {_id:0, aleatorio: {$rand: {}} }})


$round: Arredonda pro inteiro pr√≥ximo ou anterior
- Syntax: {$round: [<campo>, <numero de casas decimais>]}
- Query: db.contas.aggregate(
   {$match: {valor: {$type: "double"} }}, 
   {$sort: {"valor":-1 } }, 
   {$limit:3},
   { $lookup: {
    from: "clientes",
    localField: "id_cliente",
    foreignField: "_id",
    as: "nomeCliente" }
  },
  {$project: {_id:0, "nome": "$nomeCliente.nome", "Saldo": {$round: ["$valor", 1]}} } 
)


$trunc: S√≥ tira as casas decimais
- Syntax: { $trunc : [ <numero>, <casas> ] 
- Query: db.contas.aggregate([
  { $match: { valor: { $type: 1 } } },
  { $facet: {
      media: [{ $group: { _id: null, media: { $avg: "$valor" } } }],
      dados: [{ $project: { valor: 1 } }]
  }},
  { $project: {
      media: { $arrayElemAt: ["$media.media", 0] },
      dados: 1
  }},
  { $unwind: "$dados" },
  { $project: {
      media: 1,
      acima: { $cond: [{ $gt: ["$dados.valor", "$media"] }, 1, 0] },
      abaixo: { $cond: [{ $lt: ["$dados.valor", "$media"] }, 1, 0] }
  }},
  { $group: {
      _id: {$trunc: ["$media", 2]},
      acima_da_media: { $sum: "$acima" },
      abaixo_da_media: { $sum: "$abaixo" }
  }}
])


$divide:
- Syntax: { $divide: [ <expression1>, <expression2> ] }
- Query: db.clientes.aggregate([
   {$lookup: {from:"enderecos", localField: "_id", foreignField: "id_cliente", as: "endereco" } },
   {$match: {"endereco.estado":"ES"}},
   {$lookup: {from:"contas", localField: "_id", foreignField: "id_cliente", as: "contas_C" }},
   {$unwind: "$contas_C" },
   {$match: {"contas_C.valor": {$type:1}}},
   {$project: {
      _id:0, 
      nome:1, 
      Cidade: "$endereco.cidade", 
      Estado: "$endereco.estado" ,
      Saldo: "$contas_C.valor", 
      Saldo_metade: {$divide: ["$contas_C.valor", 2]} }}
])


$multiply:  
- Syntax: { $multiply: [ <expression1>, <expression2>, ... ] 
- Query: db.contas.aggregate( 
 {$match: {valor: {$type: "double"}}},
 {$sort:  {"valor": 1 }},
 {$limit: 3},
 {$lookup: {from: "clientes", localField: "id_cliente", 
  foreignField: "_id", as: "nomeCliente"}},
 {$project: 
 {_id: 0, "nome":"$nomeCliente.nome", 
 "valor_bonus": {$round:[{$multiply: ["$valor", 1.1]},2 ]}
}})


$concat: Junta as strings
- Syntax: { $concat: [ <expression1>, <expression2>, ... ] }
- Query: db.clientes.aggregate([
 { $project: {_id:0,
   nome_cpf: {$concat: ["$nome", " - ", "$cpf"]
  } } }
])


$split: Separa as strings em um array por meio de um separador
- Syntax: { $split: [ <string expression>, <delimiter> ] }
- Query: db.clientes.aggregate([
  {$project: {nome: {$split: ["$nome", " "]}}}
])


$arrayElemAt: pega o elemento espec√≠fico de uma array
- Syntax: { $arrayElemAt: [ <array>, <idx> ] }
- Query: db.clientes.aggregate([
{$project: {_id:0,
  nome_resumo: {$concat: [ 
  {$arrayElemAt:[{$split: ["$nome", " "]},1]},
  " ",
  {$arrayElemAt:[{$split: ["$nome", " "]},0]}
]
}
}}
])


$toLower e $toUpper
- Syntax: { $toLower: <expression> }
- Query: db.clientes.aggregate([
 {$project: 
  {_id:0, 
  email: {
    $concat: [
  {$arrayElemAt:[{$split: [ {$toLower:"$nome"} , " "]},0]}, ".",
  {$arrayElemAt:[{$split: [ {$toLower:"$nome"} , " "]},-1]},
  "@tech.com"
]}}}])


 
$toString:
- Syntax: { $toString: <expression> }
- Query: db.clientes.aggregate([
  { $lookup: { from: "contas", localField: "_id", foreignField: "id_cliente", as: "contas" } },
  { $lookup: { from: "enderecos", localField: "_id", foreignField: "id_cliente", as: "endereco" } },
  { $unwind: "$contas" },
  { $unwind: "$endereco" },
  {
    $project: {
      _id: 0,
      Cliente: "$nome",
      Info_conta: {
        $concat: [
        "Conta: ", "$contas.tipo", " - Ag√™ncia: ", { $toString: "$contas.agencia" }
        ]
      },
      Endereco: {
        $concat: [
          "Rua: ", "$endereco.rua", " - ", "$endereco.bairro", " - ",
          "$endereco.cidade", "/", "$endereco.estado", " - ", "$endereco.cep"
        ]
      }
    }
  }
])



D A T A   E   C O N D I C I O N A I S
-------------------------------------
Formatos de datas: ISO DATE() ou new Date

$year, $day, $month
- Passe uma data que eles retornam os ocrrespondentes
db.clientes.aggregate([{$project: {"ano": {$year: "$data_nascimento"}}}])


new Date().getFullYear(): Usar com a data de hj
db.clientes.aggregate([
  {$project:  {"ano": {$year: "$data_nascimento"}}},
  {$match: {ano: {$lte: new Date().getFullYear() - 30 }}},
  {$count: "acima30Anos"}
]) :: Extrai o campo ano, verifica se √© menor do que 30 anos atr√°s, ou seja conta as pessoas com mais de 30 anos



$date Diff: Pegar a diferen√ßa de per√≠odos
Entrega de produtos: dias | Idade: Anos
- Syntax:  {
   $dateDiff: {
      startDate: <data de inicio>,
      endDate: <data final>,
      unit: <unidade de tempo>,
      timezone: <fuso hor√°rio opcional>,
 startOfWeek: <dia de in√≠cio da semana (opcional, apenas para unidade 'week')>
}}

- Query: db.clientes.aggregate([
  { $project: { idade: {$toInt: {
        $dateDiff: {
          startDate: "$data_nascimento",
          endDate: "$$NOW",
          unit: "year"
   }}}}}
])


$$NOW
-- Pega a data do computador de um fuso hor√°rio diferente
db.clientes.aggregate([
  { $project: { data: "$$NOW"
   }}
])

Formata√ß√£o de datas:
$dateToString:
- Syntax:
- Query: db.clientes.aggregate([
  { $project: { agora_br: {
        $dateToString: {
          date: "$$NOW",
          format: "%Y-%m-%d %H:%M:%S",
          timezone: "America/Sao_Paulo"
   }}}}
])

$toInt: Transforma para inteiro
- Syntax: {$toInt: <Valor> }


:: Pegar s√≥ o pessoal que nasceu em janeiro:
db.clientes.aggregate([
  {$project:  {"m√™s": 
   {$month: "$data_nascimento"}, nome:1}},
{$match: {"m√™s": {$eq:1}}}
])

ou

{$match: {$expr: {$eq: [{$month: "$data_nascimento"}, 1]}}}

$set NO AGGREGATE == $addFields
- O $set vai apenas atualizar um campo mas n√£o faz a restri√ß√£o de xibir apenas ele, que √© o que o padr√£o do project faz. Caso n√£o exista o campo ele cria um novo.
EXEMPLO:
db.clientes.aggregate([
  { $set: { m√™s: { $month: "$data_nascimento" } } },
  { $match: { m√™s: 1 } },
  { $project: {nome:1, m√™s: 1}}
])


-------------------------
saldo antigo e saldo atualizado -200 com pessoal < 20 anos do valor total

db.clientes.aggregate([
  { $set: { idade: {$toInt: {
        $dateDiff: {
          startDate: "$data_nascimento",
          endDate: "$$NOW",
          unit: "year"
   }}}}},
   {$lookup: {from:"contas", localField: "_id", foreignField: "id_cliente", as: "contas",
   pipeline: [
 	{$match: {valor: {$gt:0}}},
	{$group: {_id: null, saldo_total: {$sum: "$valor"}}}
      ]
 }},
{$unwind: "$contas"},
{$match: {contas: {$ne: []}} },
{$match: {"idade": {$lt:20} }},
{$project: {
 _id:0, nome:1, idade:1,
 Saldo_anterior: "$contas.saldo_total",
 Saldo_atualizado: { $subtract: ["$contas.saldo_total", 200] } }
  }
])

$cond: - Como ele FUNCIONA
- Syntax: {campo: {$cond: [{teste l√≥gico}, True, False]}}
- Syntax: { $cond: {if: {teste l√≥gico},
    then: true,
    else: false}}
- Query: db.contas.aggregate([
  { $set: { status: { $cond: [ {$gt: ["$valor",9500 ]} , "Acima de R$9500" ,  "Abaixo de R$9500"] } } }
]) 
- Query: db.contas.aggregate([
  { $project: { _id: 0,status: { $cond: 
    {if: {$gt: ["$valor",9500 ]},
    then: "Acima de R$9500",
    else: "Abaixo de R$9500"}} , valor:1, cpf:1,  } }
]) 


$ifNull :
- Syntax: { $ifNull : ["campo", "o que ocorre se ele n√£o existir"]}
- O null √© diferente de uma string vazia
- Query: db.clientes.aggregate([
  {$set:{
    tem_dependentes: {
      $cond: [ 
        {$gt:[{$size: {$ifNull: ["$dependentes", []]}},0]} 
        ,true
        ,false]}
  }}
])

$switch:
- Syntax: $switch: {
   branches: [
      { case: <expression>, then: <expression> },
      { case: <expression>, then: <expression> }, ...
   ],
   default: <expression>
}
- Query: db.contas.aggregate([
  {$project: {
    valor:1,
    condicao: {
      $switch: {
        branches: [
           { case: {$lte: ["$valor", 3000]}, then: "Valor abaixo do esperado" },
           { case: {$and: [{$gt:["$valor", 3000]}, {$lte: ["$valor", 6000]}]}, then: "Valor na m√©dia" }
        ],
        default: "Valor acima da m√©dia"
     }
    }
  }}
])



$facet: Cria campos que s√£o aggregates:
- Syntax: {$facet: {
 campo1: [{ <expression1> }, {expression2}]
 campo2: [{ <expression1> }, {expression2}]
}}

- Query: db.contas.aggregate([
  { $match: { valor: { $type: 1 } } },
  { $facet: {
      media: [{ $group: { _id: null, media: { $avg: "$valor" } } }],
      dados: [{ $project: { valor: 1 } }]
  }},
  { $project: {
      media: { $arrayElemAt: ["$media.media", 0] },
      dados: 1
  }},
  { $unwind: "$dados" },
  { $project: {
      media: 1,
      acima: { $cond: [{ $gt: ["$dados.valor", "$media"] }, 1, 0] },
      abaixo: { $cond: [{ $lt: ["$dados.valor", "$media"] }, 1, 0] }
  }},
  { $group: {
      _id: null,
      media: { $first: "$media" },
      acima_da_media: { $sum: "$acima" },
      abaixo_da_media: { $sum: "$abaixo" }
  }}
])



-------------------------------------------------------
UPDATE COM AGGREGATE()

$merge: Update com aggragate(), √© sempre o √∫ltimo est√°gio 
- Syntax: 
{ $merge: 
    { into: collectioin que vai receber os dados, 
      whenMatched: option, 
      whenNotMatched: option } 
}
A busca √© pelo _id
whenMatched:
‚Ä¢ replace: substitui o documento de acordo com o retorno do aggregate;
‚Ä¢ keepExisting: mantem apenas o documento original;
‚Ä¢ merge: adiciona os novos campo (ou novos valores), mas mantem os demais campos;
‚Ä¢ fail: Lan√ßa um erro se o documento existir

whenNotMatche:
‚Ä¢ insert: cria um novo documento;
‚Ä¢ discard: ignora o documento (n√£o insere nada)
‚Ä¢ fail: Lan√ßa um erro e interrompe a execu√ß√£o

- Query: db.clientes.aggregate([
  {$addFields: {
    idade: {$toInt: {
      $dateDiff: {
	startDate: "$data_nascimento",
	endDate: "$$NOW",
	unit: "year"
      }
    }}	
  }},
  {$merge: {
    into: "clientes",
    whenMatched: "merge",
    whenNotMatched: "discard"
}}
])


.forEach():
- Syntax: db.collection.find().forEach( <function> )
- Query: db.clientes.aggregate([
   {$lookup: {from:"enderecos", localField: "_id", foreignField: "id_cliente", as: "enderecos", pipeline:[{$match: {estado:"ES"}}]
 } },
   {$match: {enderecos:{$ne:[]}}},
   {$lookup: {from:"contas", localField: "_id", foreignField: "id_cliente", as: "contas", pipeline:[{$match: {tipo: /corrente/i }}] }},
   {$unwind: "$contas"},
   {$set: {saldo: {$divide: ["$contas.valor", 2]} }}
]).forEach(
   function(doc){
     db.contas.updateMany(
       {_id: doc.contas._id},
       {$set: {valor: doc.saldo}}
  )
 }
)


-- √çNDICES
Deixa as coisas j√° ordenas com o objetivo de otimizar as consultas

db.clientes.getIndexes()
- Key: Campo e em que ordem ele organiza (1 crescente, -1 decrescente)
- Name: Nome do campo

db.clientes.find({nome: /noah pedro/i}).explain("executionStats")
- Monstra os status de execu√ß√£o
- Verifica todos os documentos :: stage: 'COLLSCAN'

db.clientes.find({_id:22}).explain("executionStats") 
- Por ser pelo id s√≥ verifica um documentos (por √≠ndice) :: stage: 'EXPRESS_IXSCAN'

Tranformar outro campo em id, ou seja, √∫nico
unique: se vai ser √∫nico ou n√£o
- db.clientes.createIndex({cpf: 1}, {unique: true})

executionTimeMillis :: Tempo total de execu√ß√£o da query


√çndices composto:
- db.clientes.createIndex({nome: 1,cpf: 1})
Quando voc√™ procurar pelo nome e cpf, ele vai procurar pelo √≠ndice pelo cpd
N√£o precisa ser pela ordem na hora do find ou aggregat (ou qualquer forma de consulta)

Se voc√™ fizer consultas muito recorrentes em campos que n√£o s√£o √∫nicos para usu√°rios, n√£o tem problema transforma-los em ind√≠ces

Campos importantes para saber se a consulta foi otimizada
Total de documentos examinados e est√°gio (stage e keysExamined)


Normaliza√ß√£o
Separar dados para as consultas
- Ruim porque o ideal √© que os dados sejam mais diferentes

Desmoraliza√ß√£o
- Consultas, trazer informa√ß√µes gerais mais r√°pidas.
- Sql, reduze o n√∫mero de consultas, melhora a performance de leitura, dados que raramente mudam



--------------------------------------------------------------------------------
Modelagem de Banco de dados em MONGODB:
--------------------------------------------------------------------------------
Embedding (Incorpora√ß√£o): Documentos dentro de documentos
Referencing (Refer√™ncia): Relacionamento de documentos usando comp√¥s de c√≥digos (colunas)
Hybrid (Modelagem H√≠brida): Combina os dois, mistura de incorpora√ß√£o e refer√™ncia

COMO MODELAT UM BANCO NoSQL, m√©todos recomendados:
- Frequ√™ncia de leitura vs escrita: Embedding favorece leituras r√°pidas; referencing favorece atualiza√ß√µes localizadas.

- Volume de dados aninhados: Se for alto, referencing evita que o documento cres√ßa demais.

- Atomicidade das opera√ß√µes: Embedding permite atualiza√ß√µes at√¥micas em um √∫nico documento.

- Reutiliza√ß√£o de dados: Dados compartilhados entre documentos devem ser referenciados para evitar inconsist√™ncias.


Padr√£o Hier√°rquico (Tree Pattern): S√≥ existe se o outro existe
Buccker Pattern: Documentos relacionados em um √∫nico documento bucket, normalmente usado quando se quer agrupar eventos ou registros temporais (ex: transa√ß√µes, logs) de um mesmo tipo.

============================================================
MONGODUMP
Dentro da PASTA: C:\mongo\mongosh-2.3.8-win32-x64\bin

>> Criar um Backup dentro de alguma pasta 
mongodump --db nome_banco --out "C:\Users\pedroalves-ieg\mongo"

>> Recuperar um Banco
mongorestore --db nome_banco "C:\Users\pedroalves-ieg\mongo\nome_banco"

>> Substituir dados caso n√£o existe (n√£o fica com duplicados)
mongorestore --db nome_banco --drop "C:\Users\pedroalves-ieg\mongo\nome_banco"
============================================================













