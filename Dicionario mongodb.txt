Local para rodar o c√≥digo
>> C:\Program Files\MongoDB\Server\8.0\bin
:> mongod.exe

depois:
>> C:\mongo\mongosh-2.3.8-win32-x64\bin
:> mongosh.exe

ctrl + C --> Fechar o servidor
sair do mongo no cmd --> exit()

table -> collections
rows -> documents (BSON)
columns -> fields (campos)

C O M A N D O S    I N I C I A I S:
-----------------------------------
show dbs: mostra todos os bancos que voc√™ tem
show collections --> Mostrar todas as colections do banco

db.enderecos.countDocuments() --> Conta os documentos de uma collection

use "alunos": cria um novo database / ou usar um existente

bd. tab + tab: Mostra todos os comando de db
bd.alunos. tab + tab: Mostra todos os comandos collection

DATAS:
new Date (Ano, m√™s que voc√™ quer -1, dia)
data:new ISODate()
SE DEIXAR VAZIO PEGA O DIA DE HOJE
data:new ISODate(date:{$lt:new Date(2025, 1, 20)})

db.clientes.updateMany({ $and: [ { saldo: { $gt: 10000 } }, { cartao_credito: { $exists: true } }, { data_abertura: { $lte: new Date(2023, 1, 20) } }] }, {$mul: {"cartao_credito.saldo": 1.65}})
------------------------------
I N S E R T   E   D E L E T E:
------------------------------

DENTRO DE UMA COLLECTION:
db.alunos.insertOne({nome:"Pessoas"}) -> cria uma linha com conte√∫do na collection
db.alunos.insertMany([{doc1}, {doc2}, {doc3}]) -> cria v√°rias ao mesmo tempo

db.alunos.deleteOne({nome:"Pessoas"}) -> Deleta o documento que tenha essa informa√ß√£o
db.clientes.findOneAndDelete({outro:{$exists:true}}) -> Deleta o documento e mostra qual foi deletado

db.dropDatabase() --> deleta o banco

F I N D  /  O P E R A D O R E S:
--------------------------------
operadores --> tudo que tiver um $antes

db.alunos.find() --> Select *
db.alunos.find({campo:valor_do_campo}) --> Filtragem
db.alunos.find({idade:16, estagio:true}) --> Mais de um filtro ao mesmo tempo
db.alunos.find({estagio:true}).count() --> Quantos documentos tem o estagio:true

db.collection.findOne() --> Mostra o primeiro registro
db.collection.findOne({campo:valor}) --> Mostra o primeiro registro colocado com campo:valor

$and: Mais de um filtro ao mesmo tempo
- Syntax: { $and: [ { <express√£o> }, { <express√£o> } , ...] }
- Query: db.clientes.find({ $and: [ { "cartao_credito.status": { $exists: true } }, { "cartao_credito.status": {$ne: "ativo"} }] })

$exists: Verifica se um campo existe usando True ou False
- Syntax: { campo: { $exists: <boolean> } }
- Query: db.alunos.find({telefone:{$exists: true}}) --> Onde tem campo telefone 
- Query: db.alunos.find({telefone:{$exists: false}}) --> Onde n√£o tem Campo telefone

$or: OU mostra as  pessoas com um desses nomes
- Syntax: { $or: [ {<campo1:valor1>}, {<campo2:valor2>}, ... ] }
- Query: db.alunos.find({$or:[{nome:"Juliana"}, {nome:"Fernanda"}]}) 

$in e $nin: Retorna onde pelo menos um dos itens do array cumpra a especifica√ß√µes
- Syntax: { campo: { $in: [<valor1>, <valor2>, ... ] } }
- Query: db.alunos.find({nome:{$in:["Fernanda","Juliana"]}})
- Query: db.alunos.find({"escola.nome":{$nin:["Germinare Tech", "Germinare Vet"]}})

$not: Retorna no n√£o tem a express√£o ou operador especificado
- Syntax: { campo: { $not: { <operador-express√£o> } } }
- Query: db.alunos.find({"escola.qnd_professores": {$not: {$lt:10}}}) --> Pegar alunos acessando uma array, onde a quantidade de professores n√£o √© maior que 10
- Query: db.clientes.find({"endere√ßo.estado": {$not: {$eq: "SP"} }})

$ne: mesma coisa que {$not: {$eq: "valor"}}
- Syntax: { campo: { $ne: valor } }
- Query: db.clientes.find({"endere√ßo.estado": {$ne: "SP" }})

$type: procurar pelo tipo de um campo ou valor, tem um tabela num√©rica de tipos
- Syntax: { campo: { $type: <tipo da v√°riavel> } }
- Query: db.alunos.find({telefone: {$type: "int"}}) 

typeof: Descobrir o tipo de um campo
- Syntax: typeof db.collection.findOne({<identificar-documento>}).campo
- Query: typeof db.alunos.findOne({nome:"Juliana"}).telefone 

$regex üòé: 
- Syntax: { $regex: /padr√£o/ }
- Query: db.alunos.find({disciplinas:{$regex: /Desenvolvimento/}})
--------------------------------------
SELETORES DE QUERY:
$eq : == | Igual
$gt : >  | Maior
$gte: >= | Maior igual
$lt : <  | Menor
$lte: <= | Menor igual

Syntax: { <campo>: { $eq: <valor> } }
Query: db.alunos.find({media:{$lt:7}}) 
--------------------------------------
======================================
OS CAMPOS PROCURADOS DEVEM EXISTIR EM TODOS OS DOCUMENTOS PARA FUNCIONAR

$elemMatch: Procura pelo menos 1 elemento segundo o que voc√™ pediu e retorna o campo array
- Syntax: { <campo>: { $elemMatch: { <query1>, <query2>, ... } } } 
- Query: db.clientes.find({emprestimo_tipo:{$elemMatch: {$eq: "Pessoal"}}})

$size: S√ì FUNCIONA COM em array E COM N√öMEROS INTEIROS, nada de opera√ß√µes, pega a quantidade de elementos
- Syntax: { campo: { $size: <inteiro> } }
- Query: db.alunos.find({disciplinas:{$size:4}})

$expr:
Forma de usar:
1¬∞ Usar $expr | 2¬∞ a express√£o que voc√™ quer usar | 3¬∞ A coluna em que voc√™ que usar a express√£o
- Syntax: { $expr: { <express√£o> } }
- Query: db.alunos.find({$expr:{$gte:[{$size:"$disciplinas"}, 3]}})
======================================

-- UPDATE:
findOneandReplace() --> √â o update onde porem d√° para ver como o documento estava antes

db.alunos.updateOne(): Tamb√©m pode servir para criar um novo campo no final, caso ele n√£o exista

$set: Serve para criar novo campo ou mudar um campo existente
- Query: db.alunos.updateOne({nome:"Juliana"}, {$set:{media:7.8}}) --> Modifica somente o primeiro com o nome:"Juliana", muda a m√©dia para 7.8

Adicionar em todos os docs o mesmo campo e mesmas informa√ß√µes (filtro vazio):
- Query: db.alunos.updateMany({}, { $set: { escola: { nome: "Germenare Tech", diretor: "Jo√£o Pilla", qnd_professores: 4 } } } ) 

$unset: Delete um campo
- Syntax: { $unset: { campo: ""}}
- Query: db.clientes.updateOne({ $and: [ { "cartao_credito.status": { $exists: true } }, { "cartao_credito.status": {$ne: "ativo"} }]}, {$unset: {cartao_credito: ""}})


$setOnInsert: Voc√™ quer atualizar algo, se n√£o encontrar na filtragem ent√£o ele cria um novo documento (evitar duplicados)
-- upsert(par√¢metro): se for false n√£o cria um novo documento independente de ter achado ou n√£o
- Syntax: 
- Query: db.clientes.updateOne({nome:"outro"}, {$setOnInsert:{teste:"teste",outro:"teste2"}}, {upsert:true})
 

-------------------------------------------------------------------
S√ì FUNCIONAM COM VALORES N√öMERICOS
$inc: Atualiza um valor existente (Adi√ß√£o ou subtra√ß√£o)
- Syntax: {$inc: {<campo> : valor_incrementado}}
- Query: db.clientes.updateMany({cartao_credito: {$exists:true}}, {$inc:{saldo:100}})
- Query: db.clientes.updateMany({cartao_credito: {$exists:true}}, {$inc:{saldo: -50}})

$mul: Atualiza um valor existente (Multiplica o valor ou divis√£o)
- Syntax: { $mul: { <campo>: <porcentagem_decimal> } }
- Query: db.clientes.updateMany({idade: {$gt:60}}, {$mul: {saldo: 1.1}}) --> aumenta 10%

Inc + Mul: {$inc: {$mul: 1.1}} --> se o valor for 100, retorna 210
-------------------------------------------------------------------

$min e $max: S√≥ atualiza se o valor for menor(min), ou maior(max) que o valor especificado
ESTOQUE: min = min: max = max
$max: aumenta se o valor for menor |  $min: Diminui se o valor for maior
- Syntax: ($min/$max: {<campo>: valor})
- Query: db.clientes.updateOne({nome: "Iago"}, {$min: {saldo:101}})
- Query: db.clientes.updateOne({nome: "Iago"}, {$max: {saldo:100}})

$rename: deve sempre usar ""
- Se quando for renomear, a array n√£o tiver um nome diferente, o ideal √© fazer um de cada vez
- Syntax: { $rename: { "<campo>": "<novo_nome>", "<campo2>": "<novo_nome2>"} }
- Query: db.clientes.updateMany({}, {$rename: {"endere√ßo": "endereco"}})
- Query: db.clientes.updateMany({}, {$rename: {"endere√ßo": "endereco", "Campo1": "valor2"}})

-------------------------------------------------------------------
-- RETORNO COM FORMATA√á√ÉO SEPARADA

1: Siginifica de certa forma o True (Deve aparecer)
0: Representa o False (N√£o vai aparecer)

-- db.clientes.find({}, {nome:1, _id:0}) mostrar somente os nomes dos documentos

-- db.clientes.find({ emprestimo_disponivel:true }, {nome:1, "endere√ßo":1, emprestimo_disponivel:1 , _id:0})
-------------------------------------------------------------------

ARRAYS:
$pull: remove TODOS OS VALORER CORRESPONDENTES de um campo array
- Syntax: { $pull: { <campo1>: <valor|condi√ß√£o>, <campo2>: <valor|condi√ß√£o>, ... } }
- Query: db.clientes.updateOne({nome:"Lamelo"}, {$pull: {empretimo_tipo: 'Consignado'}}) 

$push: Adiciona um valor na array sem se importar com duplicatas
- Syntax:{ $push: { <campo1>: <valor1>, ... } }
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$push: {emprestimo_tipo: 'Pessoal'}})

$addToSet: Adiciona um valor numa array e garantir que o valor seja √∫nico
- Syntax: { $addToSet: { <campo1>: <valor1>, ... } }
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$addToSet: {emprestimo_tipo: 'FGTS'}})

$pop: s√≥ faz a remo√ß√£o do √∫ltimo ou o primeiro:
- Syntax: { $pop: { <campo>: <-1 | 1>, ... } } [-1: primeiro | 1: √∫ltimo]
- Query: db.clientes.updateOne({nome:"Jucelio"}, {$pop: {emprestimo_tipo: 1}})

$pullAll: Remove mais de um item de uma array por vez (TODOS os correspondentes)
- Syntax: { $pullAll: { <campo>: [ <valor1>, <valor2> ... ], ... } }
- Query: db.lista.updateOne({_id:1}, {$pullAll:{vetor_num: [10,3]}})

$each [Modificador]: 
- Use com $addToSet ou $push para adicionar v√°rios valores a uma array <campo> se os valores n√£o existirem no <campo>.
- Syntax: { $addToSet: { <campo>: { $each: [ <valor1>, <valor2> ... ] } } }
- Query: db.clientes.updateOne({nome:"Lamelo"}, {$addToSet: {emprestimo_tipo: {$each: ["FGTS" ,"Consignado", "Pessoal", "Garantia"]}}})

$position:
Adiciona em uma posi√ß√£o espec√≠fica 
- Syntax: 
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_num:{$each:[10,3], $position:0}}})

$slice:
Limita a quantidade de elementos
Final para o come√ßo (√∫ltimos itens do array): n√∫mero negativo -5
- Syntax: 
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_num:{$each:[100,200], $slice: -5}}})
- Query: db.lista.updateOne({_id:1}, {$push:{vetor_nome:{$each: [], $slice: 3}}}) [deixar os 3 primeiros]
Colocar no meio de uma array com position: (tamanho da array / 2) + 1

$sort:
Ordena em ordem crescente [1] ou decrescente [-1]
Colocar no meio de uma array com position: (tamanho da array / 2) + 1
db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})
- Syntax: 
{ $push: {
     <campo>: {
       $each: [ <valor1>, <valor2>, ... ],
       $sort: <ordem desejada> }
  }
}
- Query: db.lista.updateOne({_id:1}, {$push: { vetor_nome: {$each: [ "Zacarais", "Andre", "Bruno" ], $sort: 1}} })
- Query (sem adicionar):  db.lista.updateOne({_id:1}, {$push: { vetor_nome: {$each: [], $sort: 1}} })
- Query: db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})
--------------------------------------------

.sort()
Sa√≠da ordenada
|  saldo: menor -> maior
|  data_abertura: mais recente-> mais antigo
- Query: db.clientes.find({}, {_id:0, nome:1, sobrenome:1, saldo:1}).sort({saldo:1})   
- Query: db.clientes.find({}, {_id:0, nome:1, sobrenome:1, endereco:1}).sort({nome:1, sobrenome:1})
- db.clientes.find({}, {_id:0, nome:1, sobrenome:1, data_abertura:1}).sort({data_abertura:1}) 

db.clientes.updateMany({emprestimo_tipo: {$exists: true}}, {$push: {emprestimo_tipo: {$each: [], $sort: 1} }})

I M P O R T A √á √É O 
-------------------
- Formata√ß√µes v√°lidas: csv, json, tsv.
Na pasta: 

>> C:\mongo\mongosh-2.3.8-win32-x64\bin\tools
Dar o comando: 
:> mongoimport.exe --db=techBank --collection=Contas --type=csv --headerline --file="caminho\Contas.csv"

Quando for um arquivo .json, n√£o precisa do type:
:> mongoimport.exe --db=techBank --collection=Clientes --file="caminho\Clientes.json" --jsonArray

Renomear Collection
- Query: db.Clientes.renameCollection("clientes")

.limit()
- Systax: db.collection.find(<query>).limit(<number>)
- Query: db.clientes.find({}, {nome:1, _id:0}).sort({data_nascimento:1}).limit(1)

$all: √â tipo o $and
- Syntax: { <campo>: { $all: [ <valor1> , <valor2> ... ] } }
- Query: db.clientes.find({seguros:{$all:["seguro de vida","seguro para carro"]}}).count()

.distinct: 
Procurar valores distintos para um √∫nico campo
- Query: db.contas.distinct("tipo")
- Query: db.enderecos.distinct("estado")
- Query: db.clientes.distinct("profissao", {profissao: {$regex: /^v/i}})

.length:
√â usado para valores dentro de uma array
- Query: db.clientes.distinct("status_civil").length
----------------------------------------------------

Framework: programa + algumas fun√ß√£o da linguagem, reduz sobrecarga de rede
Biblioteca: S√≥ o programa, voc√™ o usa mudando alguns par√¢metros

Aggregate Framework: + de 1 consulta, updates, qualquer coisa mais avan√ßada (pipelines baseado em est√°gios)
Find: procura Documentos
Aggregate: faz mudan√ßa com retorno

$sum
- Syntax: { $sum: <express√£o> }
- Query: <Null>

$group:
- Syntax: { $group: {
  _id: <express√£o>, // Group key
   <campo1>: { <accumulador> : <express√£o> },
}}
- Query: db.clientes.aggregate({$group: {_id: "$status_civil", "Quantidade": {$count:{}}}}) --> pega os √∫nicos de cada estado civil e depois conta cada um deles
- Query: db.contas.aggregate([
   {$group: {_id: "$tipo", "Total em dinheiro": {$sum: "$valor"}}},
   { $sort: { "Total em dinheiro":1 }}
]) --> Colocar colchetes, soma os saldos por tipo de contas
- Query: db.contas.aggregate([{ $group: { _id: "$agencia", "qnt": { $count:{} } } }, { $sort: { "qnt": -1 } }] )



$match:
- Syntax
- Query: db.contas.aggregate([
    {$match:{valor: {$gt:8500}}},
    {$group:{_id:"$tipo", "Quantidade": {$count:{}}}}
]) --> pegua 1¬∞ os docs em que os valores s√£o > que 8500 e depois contas ele por 'distinct'
- Query: db.contas.aggregate([{ $match: { agencia: 1545 } }, { $group: { _id: "$tipo", "Dinheiro": { $sum: "$valor" } } }, { $sort: { "Dinheiro": -1 } }] )

$limit:
-- Limita a quantidade de retornos na query
- Syntax: db.article.aggregate([
   { $limit : 5 }
]);
- Query: db.clientes.aggregate([{$sort: {data_nascimento:1}}, {$limit:1}])


$sortByCount:
- Syntax: { $sortByCount:  <expression> }
- Query sem: db.clientes.aggregate([{$group: {_id:"$genero", "qnt": {$count:{}}}}, {$sort: {_id:1}}])
- Query: db.clientes.aggregate([{$sortByCount: "$genero"}])


$unwind:
Descontroi um campo de matriz dos documentos para
- Syntax:  { $unwind: <campo path> }
- Query: db.clientes.aggregate([{$unwind: "$seguros"}, {$sortByCount: "$genero"}])


$firt: (OPERADOR DO $GROUP)




DESAFIOS:
QNT AGENCIAS NO BANCO?
db.contas.aggregate({$group: {_id: "$agencia"}} ,{$count: "qnt" })

QUAL AGENCIA TEM MAIS CONTA?

AGENCIA COM 5 > SALDOS?
db.contas.aggregate([ { $group: { _id: "$agencia", "Total": { $sum: "$valor" } } }, { $sort: { "Total": -1 } }, { $limit: 5 }] )

QUANTOS CLIENTES TEM MAIS DE UM ENDERE√áO CADASTRADO?
 db.enderecos.aggregate({$group: {_id: "$id_cliente", "qnd": {$count:{}}}})  

RANKING DOS 10 primeiros QUE MAIS TEM ENDERE√áO CADASTRADOS
 db.enderecos.aggregate({$sortByCount:"$estado"}, {$limit: 10})
----------------------------------------------------------------------

